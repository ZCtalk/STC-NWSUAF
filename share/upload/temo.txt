def index_views(request):
    lpkq = Goodstype.objects.get(typeName='礼品卡券')
    # goods_lpkq = Goods.objects.get(goodType_id=lpkq.id)
    goods_lpkq = Goods.objects.filter(goodType_id=lpkq.id)

    jtlf = Goodstype.objects.get(typeName='家庭量贩')
    goods_jtlf = Goods.objects.filter(goodType_id=jtlf.id)

    qqxg = Goodstype.objects.get(typeName='全球鲜果')
    goods_qqxg = Goods.objects.filter(goodType_id=qqxg.id)

    sxms = Goodstype.objects.get(typeName='生鲜美食')
    goods_sxms = Goods.objects.filter(goodType_id=sxms.id)


    # goods_jtlf = jtlf.good_set.all()
    return render(request,'index.html',locals())

    <div>
        <hr>
        <img src="{{lpkq.typePic}}" alt="{{lpkq.typeName}}">
        <ul>
            {%for good in goods_lpkq%}
            <li>
                <img src="{{good.goodPic}}" alt="{{good.goodTitle}}">
                <p>{{good.goodTitle}}</p>
                <p>{{good.goodPrice}}/{{good.goodSpec}}</p>
            </li>
            {%endfor%}
        </ul>

    </div>

def listType(a):
    new_string = ""
    numSum = 0
    for value in map(type,a):
        if isinstance(value,int) or isinstance(value,float):
            numSum += value
        elif isinstance(value,str):
            new_string += value  

    if new_string and numSum:
        print "String:", new_string
        print "Sum:", numSum
        print "This list is of mixed type"
    elif new_string:
        print "String:", new_string
        print "This list is of string type"
    else:
        print "Sum:", numSum
        print "This list is of integer type"

listType(a)






              <li class="selected"><a href="#">热门</a></li>
              <li><a href="#">市场</a></li>
              <li><a href="#">讨论</a></li>
              <li><a href="#">网盘</a></li>


 index_user                 |
| market_evidence            |
| market_feedback            |
| market_good                |
| market_order               |
| share_file                 |
| share_fileclassify      


class FileClassify(models.Model):
#     title=models.CharField(max_length=20)
#     desc=models.TextField()
#     def __str__(self):
#         return self.title
#     class Meta:
#         #db_table="author"
#         verbose_name='文件类型'
#         verbose_name_plural=verbose_name

















